<theme-toggle>
  <button 
    title="Dark/Light mode" 
    aria-pressed="false" 
    aria-label="Toggle dark mode"
    class="focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 rounded-md p-1">
  </button>
</theme-toggle>
<script>
  // Improved sun icon with rays, updated size and alignment
  const sunIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline-block align-middle" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <circle cx="12" cy="12" r="5"/>
    <g stroke="currentColor" stroke-width="2" stroke-linecap="round">
      <line x1="12" y1="1" x2="12" y2="3"/>
      <line x1="12" y1="21" x2="12" y2="23"/>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
      <line x1="1" y1="12" x2="3" y2="12"/>
      <line x1="21" y1="12" x2="23" y2="12"/>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
    </g>
  </svg>`;

  const moonIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline-block align-middle" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
    <path d="M17.293 13.293a8 8 0 11-10.586-10.586 8.003 8.003 0 0010.586 10.586z"/>
  </svg>`;

  class ThemeToggle extends HTMLElement {
    private readonly STORAGE_KEY = "theme-preference";
    private _darkTheme = false;
    private button: HTMLButtonElement | null;

    constructor() {
      super();
      this.button = this.querySelector("button");

      if (!this.button) {
        console.error("Theme toggle button not found");
        return;
      }

      // Load theme preference
      const savedTheme = localStorage.getItem(this.STORAGE_KEY);
      if (savedTheme) {
        this.darkTheme = savedTheme === "dark";
      } else {
        this.darkTheme = window.matchMedia("(prefers-color-scheme: dark)").matches;
      }

      // Setup event listeners
      this.button.addEventListener("click", this.toggleTheme.bind(this));

      // Listen for system theme changes
      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
        if (!localStorage.getItem(this.STORAGE_KEY)) {
          this.darkTheme = e.matches;
        }
      });
    }

    get darkTheme(): boolean {
      return this._darkTheme;
    }

    set darkTheme(value: boolean) {
      this._darkTheme = value;
      document.documentElement.classList.toggle("dark", value);

      if (this.button) {
        // Replace emoji icons with SVG icons
        this.button.innerHTML = value ? sunIcon : moonIcon;
        this.button.setAttribute("aria-label", value ? "Switch to light theme" : "Switch to dark theme");
        this.button.setAttribute("aria-pressed", value.toString());

        // Announce theme change to screen readers
        const announcement = document.createElement("div");
        announcement.setAttribute("aria-live", "polite");
        announcement.setAttribute("class", "sr-only");
        announcement.textContent = value ? "Dark theme enabled" : "Light theme enabled";
        this.appendChild(announcement);

        // Remove announcement after it's been read
        setTimeout(() => {
          if (announcement.parentNode === this) {
            this.removeChild(announcement);
          }
        }, 1000);
      }
    }

    toggleTheme() {
      this.darkTheme = !this.darkTheme;
      localStorage.setItem(this.STORAGE_KEY, this.darkTheme ? "dark" : "light");
    }
  }

  customElements.define("theme-toggle", ThemeToggle);
</script>
