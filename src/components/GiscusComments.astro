---
export interface Props {
  /**
   * The GitHub repository where discussions will be created
   * Format: "owner/repo"
   */
  repo?: string;
  
  /**
   * The discussion category to use for comments
   */
  category?: string;
  
  /**
   * Mapping strategy for discussions
   */
  mapping?: 'pathname' | 'url' | 'title' | 'og:title' | 'specific' | 'number';
  
  /**
   * Whether to enable reactions on the main post
   */
  reactionsEnabled?: boolean;
  
  /**
   * Whether to emit discussion metadata
   */
  emitMetadata?: boolean;
  
  /**
   * Input position relative to the comments
   */
  inputPosition?: 'top' | 'bottom';
  
  /**
   * Theme for the comments widget
   * 'auto' will automatically switch between light/dark based on the site theme
   */
  theme?: 'light' | 'dark' | 'auto' | 'preferred_color_scheme' | 'transparent_dark' | 'noborder_light' | 'noborder_dark';
  
  /**
   * Language for the comments interface
   */
  lang?: string;
  
  /**
   * Whether to load comments lazily
   */
  loading?: 'lazy' | 'eager';
}

const {
  repo = "laurentkempe/myblog-comments",
  category = "General",
  mapping = "pathname",
  reactionsEnabled = true,
  emitMetadata = false,
  inputPosition = "bottom",
  theme = "preferred_color_scheme",
  lang = "en",
  loading = "lazy"
} = Astro.props;
---

<div class="giscus-container mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
  <div id="giscus-comments"></div>
</div>

<script is:inline>
  (function() {
    const STORAGE_KEY = "theme-preference";
    
    // Function to get current theme based on ThemeToggle logic
    function getCurrentTheme() {
      const savedTheme = localStorage.getItem(STORAGE_KEY);
      if (savedTheme) {
        return savedTheme === "dark" ? "dark" : "light";
      } else {
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      }
    }
    
    // Function to get giscus theme name
    function getGiscusTheme(isDark) {
      return isDark ? "dark" : "light";
    }
    
    // Function to send theme change message to giscus iframe
    function updateGiscusTheme(theme) {
      const iframe = document.querySelector('iframe.giscus-frame');
      if (iframe) {
        iframe.contentWindow.postMessage({
          giscus: {
            setConfig: {
              theme: getGiscusTheme(theme === "dark")
            }
          }
        }, 'https://giscus.app');
      }
    }
    
    // Initialize giscus with correct theme
    const initialTheme = getCurrentTheme();
    const script = document.createElement('script');
    script.src = 'https://giscus.app/client.js';
    script.setAttribute('data-repo', 'laurentkempe/myblog-comments');
    script.setAttribute('data-repo-id', 'R_kgDOPHtNGA');
    script.setAttribute('data-category', 'General');
    script.setAttribute('data-category-id', 'DIC_kwDOPHtNGM4Csi4o');
    script.setAttribute('data-mapping', 'pathname');
    script.setAttribute('data-strict', '0');
    script.setAttribute('data-reactions-enabled', '1');
    script.setAttribute('data-emit-metadata', '0');
    script.setAttribute('data-input-position', 'bottom');
    script.setAttribute('data-theme', getGiscusTheme(initialTheme === "dark"));
    script.setAttribute('data-lang', 'en');
    script.setAttribute('data-loading', 'lazy');
    script.setAttribute('crossorigin', 'anonymous');
    script.async = true;
    
    const container = document.getElementById('giscus-comments');
    if (container) {
      container.appendChild(script);
    }
    
    // Listen for theme changes
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const isDark = document.documentElement.classList.contains('dark');
          updateGiscusTheme(isDark ? "dark" : "light");
        }
      });
    });
    
    // Start observing changes to the document element's class
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
    
    // Also listen for storage changes (in case theme is changed in another tab)
    window.addEventListener('storage', function(e) {
      if (e.key === STORAGE_KEY) {
        const newTheme = e.newValue === "dark" ? "dark" : "light";
        updateGiscusTheme(newTheme);
      }
    });
    
    // Listen for system theme changes when no preference is saved
    window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", function(e) {
      if (!localStorage.getItem(STORAGE_KEY)) {
        updateGiscusTheme(e.matches ? "dark" : "light");
      }
    });
  })();
</script>

<style>
  .giscus-container {
    /* Ensure giscus iframe integrates well with the page design */
    width: 100%;
  }
  
  /* Ensure giscus respects the color scheme */
  .giscus-container iframe {
    color-scheme: auto;
  }
</style>