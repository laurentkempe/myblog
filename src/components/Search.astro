---
// Search component with Pagefind integration
---

<!-- Search button -->
<search-toggle>
  <button 
    id="search-button"
    title="Search"
    aria-label="Open search" 
    class="hover:text-gray-900 dark:hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 rounded-md p-1"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline-block align-middle" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
  </button>
</search-toggle>

<script>
  // TypeScript declarations for Pagefind
  declare global {
    interface Window {
      PagefindUI: any;
    }
  }

  class SearchToggle extends HTMLElement {
    private searchButton: HTMLButtonElement | null;
    private isSearchLoaded = false;
    private static globalKeyboardListenerAdded = false;

    constructor() {
      super();
      this.searchButton = this.querySelector("#search-button");

      if (!this.searchButton) {
        console.error("Search button not found");
        return;
      }

      // Create modal when component initializes
      this.createModal();

      // Setup event listeners
      this.searchButton.addEventListener("click", this.openSearch.bind(this));

      // Setup global keyboard shortcut (only once)
      if (!SearchToggle.globalKeyboardListenerAdded) {
        this.setupGlobalKeyboardShortcut();
        SearchToggle.globalKeyboardListenerAdded = true;
      }
    }

    createModal() {
      // Check if modal already exists
      if (document.getElementById("search-modal")) return;

      // Create modal HTML
      const modal = document.createElement("div");
      modal.id = "search-modal";
      modal.className = "fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden";
      modal.setAttribute("role", "dialog");
      modal.setAttribute("aria-modal", "true");
      modal.setAttribute("aria-labelledby", "search-title");
      modal.innerHTML = `
        <div class="flex items-start justify-center pt-4 px-4 pb-4 min-h-full sm:pt-8">
          <div class="relative bg-white dark:bg-gray-800 rounded-xl shadow-2xl transform transition-all w-full max-w-2xl max-h-[90vh] flex flex-col">
            <!-- Modal header -->
            <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700 shrink-0">
              <h2 id="search-title" class="text-xl font-semibold text-gray-900 dark:text-gray-100">Search</h2>
              <button 
                id="search-close" 
                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-lg p-1 transition-colors"
                aria-label="Close search"
              >
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <!-- Search content with scrollable results -->
            <div class="flex-1 overflow-hidden flex flex-col">
              <div class="px-6 py-4 shrink-0">
                <div id="pagefind-search" class="w-full"></div>
              </div>
              
              <!-- Scrollable results area -->
              <div id="search-results" class="flex-1 overflow-y-auto px-6 pb-4"></div>
            </div>
          </div>
        </div>
      `;

      // Append to body
      document.body.appendChild(modal);

      // Setup modal event listeners
      const closeButton = modal.querySelector("#search-close");
      closeButton?.addEventListener("click", this.closeSearch.bind(this));
      
      // Close modal when clicking outside
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          this.closeSearch();
        }
      });

      // Close modal with Escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && !modal.classList.contains("hidden")) {
          this.closeSearch();
        }
      });
    }

    setupGlobalKeyboardShortcut() {
      // Global keyboard shortcut for Ctrl+K (or Cmd+K on Mac)
      document.addEventListener("keydown", (e) => {
        // Check for Ctrl+K or Cmd+K
        if ((e.ctrlKey || e.metaKey) && e.key === "k") {
          e.preventDefault();
          e.stopPropagation();
          
          // Find the first search component and open it
          const searchComponent = document.querySelector("search-toggle") as SearchToggle;
          if (searchComponent) {
            searchComponent.openSearch();
          }
        }
      });
    }

    async openSearch() {
      const modal = document.getElementById("search-modal");
      if (!modal) return;

      // Load Pagefind only when first needed
      if (!this.isSearchLoaded) {
        await this.loadPagefind();
        this.isSearchLoaded = true;
      }

      modal.classList.remove("hidden");
      document.body.style.overflow = "hidden";

      // Focus the search input with retry logic for better reliability
      this.focusSearchInput(modal);
    }

    private focusSearchInput(modal: HTMLElement, retryCount = 0) {
      const maxRetries = 10;
      const retryDelay = 50;

      const searchInput = modal.querySelector("input[type='search']") as HTMLInputElement;
      
      if (searchInput) {
        // Found the search input - focus it (works for both enabled Pagefind inputs and readonly dev inputs)
        searchInput.focus();
        return;
      }
      
      if (retryCount < maxRetries) {
        // Retry after a short delay
        setTimeout(() => {
          this.focusSearchInput(modal, retryCount + 1);
        }, retryDelay);
      } else {
        // Fallback: try to focus any input in the modal
        const anyInput = modal.querySelector("input") as HTMLInputElement;
        if (anyInput) {
          anyInput.focus();
        }
      }
    }

    closeSearch() {
      const modal = document.getElementById("search-modal");
      if (!modal) return;

      modal.classList.add("hidden");
      document.body.style.overflow = "";
      this.searchButton?.focus();
    }

    async loadPagefind() {
      try {
        // Load Pagefind script dynamically
        const script = document.createElement('script');
        script.src = '/pagefind/pagefind-ui.js';
        script.type = 'text/javascript';
        
        await new Promise((resolve, reject) => {
          script.onload = resolve;
          script.onerror = reject;
          document.head.appendChild(script);
        });

        // Load Pagefind CSS
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = '/pagefind/pagefind-ui.css';
        document.head.appendChild(link);

        // Wait a bit for the script to initialize
        await new Promise(resolve => setTimeout(resolve, 100));

        // Create Pagefind UI
        const container = document.getElementById("pagefind-search");
        if (container && window.PagefindUI) {
          const ui = new window.PagefindUI({ 
            element: container,
            showSubResults: true,
            showImages: false,
            resetStyles: false,
            excerptLength: 30,
          });

          // Style the Pagefind UI to match the site theme
          this.stylePagefindUI();

          // Wait for Pagefind UI to be fully rendered
          await new Promise(resolve => setTimeout(resolve, 150));
        }
      } catch (error) {
        console.warn("Pagefind not available (likely in development mode):", error);
        
        // Show basic search input as fallback
        const container = document.getElementById("pagefind-search");
        if (container) {
          container.innerHTML = `
            <div class="space-y-4">
              <input 
                type="search" 
                placeholder="Search posts..." 
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 text-lg"
                readonly
                data-dev-mode="true"
              />
              <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                <div class="flex items-start">
                  <svg class="w-5 h-5 text-blue-500 mt-0.5 mr-3 shrink-0" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                  </svg>
                  <div class="text-sm text-blue-800 dark:text-blue-200">
                    <p class="font-medium mb-1">Search functionality requires building the site first.</p>
                    <p>Run <code class="bg-blue-100 dark:bg-blue-800 px-2 py-1 rounded font-mono text-xs">pnpm run build</code> to enable search.</p>
                  </div>
                </div>
              </div>
            </div>
          `;
        }
      }
    }

    stylePagefindUI() {
      // Add custom styles for Pagefind UI to match the site theme
      const style = document.createElement("style");
      style.textContent = `
        .pagefind-ui {
          --pagefind-ui-scale: 1;
          --pagefind-ui-primary: #3b82f6;
          --pagefind-ui-text: #374151;
          --pagefind-ui-background: #ffffff;
          --pagefind-ui-border: #e5e7eb;
          --pagefind-ui-tag: #f3f4f6;
          --pagefind-ui-font: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        }
        
        .dark .pagefind-ui {
          --pagefind-ui-text: #e5e7eb;
          --pagefind-ui-background: #1f2937;
          --pagefind-ui-border: #374151;
          --pagefind-ui-tag: #374151;
        }

        .pagefind-ui__form {
          margin-bottom: 0;
        }

        .pagefind-ui__search-input {
          border-radius: 0.5rem;
          border: 1px solid var(--pagefind-ui-border);
          padding: 0.75rem 1rem;
          width: 100%;
          background: var(--pagefind-ui-background);
          color: var(--pagefind-ui-text);
          font-size: 1.125rem;
          font-family: var(--pagefind-ui-font);
          transition: all 0.2s ease;
        }

        .pagefind-ui__search-input:focus {
          outline: 2px solid var(--pagefind-ui-primary);
          outline-offset: 2px;
          border-color: var(--pagefind-ui-primary);
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .pagefind-ui__results-area {
          margin-top: 0;
          max-height: none;
        }

        .pagefind-ui__results {
          padding: 0;
          margin: 0;
        }

        .pagefind-ui__result {
          border: 1px solid var(--pagefind-ui-border);
          border-radius: 0.5rem;
          padding: 1.25rem;
          margin-bottom: 0.75rem;
          background: var(--pagefind-ui-background);
          transition: all 0.2s ease;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .pagefind-ui__result:hover {
          border-color: var(--pagefind-ui-primary);
          box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
          transform: translateY(-1px);
        }

        .pagefind-ui__result-link {
          color: var(--pagefind-ui-primary);
          text-decoration: none;
          font-weight: 600;
          font-size: 1.125rem;
          line-height: 1.4;
          font-family: var(--pagefind-ui-font);
        }

        .pagefind-ui__result-link:hover {
          text-decoration: underline;
        }

        .pagefind-ui__result-excerpt {
          color: var(--pagefind-ui-text);
          margin-top: 0.5rem;
          font-size: 0.875rem;
          line-height: 1.6;
          font-family: var(--pagefind-ui-font);
        }

        .pagefind-ui__result-tags {
          margin-top: 0.75rem;
          display: flex;
          flex-wrap: wrap;
          gap: 0.375rem;
        }

        .pagefind-ui__result-tag {
          background: var(--pagefind-ui-tag);
          color: var(--pagefind-ui-text);
          padding: 0.25rem 0.5rem;
          border-radius: 0.375rem;
          font-size: 0.75rem;
          font-weight: 500;
        }

        .pagefind-ui__message {
          text-align: center;
          color: var(--pagefind-ui-text);
          font-style: italic;
          padding: 2rem;
          font-family: var(--pagefind-ui-font);
        }

        .pagefind-ui__loading {
          text-align: center;
          color: var(--pagefind-ui-text);
          padding: 2rem;
          font-family: var(--pagefind-ui-font);
        }

        /* Custom scrollbar for the results area */
        #search-results::-webkit-scrollbar {
          width: 6px;
        }

        #search-results::-webkit-scrollbar-track {
          background: transparent;
        }

        #search-results::-webkit-scrollbar-thumb {
          background: var(--pagefind-ui-border);
          border-radius: 3px;
        }

        #search-results::-webkit-scrollbar-thumb:hover {
          background: var(--pagefind-ui-text);
        }

        /* Responsive adjustments */
        @media (max-width: 640px) {
          .pagefind-ui__search-input {
            font-size: 1rem;
            padding: 0.625rem 0.875rem;
          }
          
          .pagefind-ui__result {
            padding: 1rem;
          }
          
          .pagefind-ui__result-link {
            font-size: 1rem;
          }
        }
      `;
      document.head.appendChild(style);
    }
  }

  if (!customElements.get("search-toggle")) {
    customElements.define("search-toggle", SearchToggle);
  }
</script>