---
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { Icon } from 'astro-icon/components';
import BlogPostPreview from '../../components/BlogPostPreview.astro';
import { getTagSlug } from '../../utils/tags';

type Post = CollectionEntry<'posts'>;
interface TagPosts {
  [key: string]: Post[];
}

const allPosts = await getCollection('posts');
const sortedPosts = allPosts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get all unique tags
const allTags = [...new Set(sortedPosts.flatMap(post => post.data.tags || []))].sort();

// Get top posts for each tag
const tagPosts: TagPosts = {};
for (const tag of allTags) {
  tagPosts[tag] = sortedPosts
    .filter(post => post.data.tags?.includes(tag))
    .slice(0, 4);
}
---

<Layout title="All Tags">
  <div class="max-w-4xl mx-auto px-4 mt-4">
    {allTags.map(tag => (
      <div class="mb-12">
        <h2 class="text-2xl pl-4 pt-8 font-bold mb-8 flex items-center gap-2 text-gray-800 dark:text-gray-200">
          <Icon name="fa6-solid:tag" class="w-6 h-6" />
          <a href={`/tags/${getTagSlug(tag)}`} class="hover:text-blue-500 dark:hover:text-blue-400">
            Posts tagged with "{tag}"
          </a>
          <span class="text-lg text-gray-500 dark:text-gray-400">
            ({sortedPosts.filter(post => post.data.tags?.includes(tag)).length} posts)
          </span>
        </h2>

        {tagPosts[tag].map(post => <BlogPostPreview post={post} />)}

        {tagPosts[tag].length > 4 && (
          <div class="text-center mt-4">
            <a 
              href={`/tags/${getTagSlug(tag)}`} 
              class="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
            >
              View all posts tagged with "{tag}"
            </a>
          </div>
        )}
      </div>
    ))}
  </div>
</Layout>