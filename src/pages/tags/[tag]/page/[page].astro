---
import Layout from '../../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import BlogPostPreview from '../../../../components/BlogPostPreview.astro';
import Pagination from '../../../../components/Pagination.astro';
import { Icon } from 'astro-icon/components';
import { getTagSlug, getTagFromSlug } from '../../../../utils/tags';
import type { CollectionEntry } from 'astro:content';

type Post = CollectionEntry<'posts'>;

export async function getStaticPaths() {
  const allPosts = await getCollection("posts");
  const sortedPosts = allPosts.sort((a, b) => 
    new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  );

  const allTags = [...new Set(sortedPosts.flatMap(post => post.data.tags || []))].sort();

  const paths = allTags.flatMap(tag => {
    const tagPosts = sortedPosts.filter(post => 
      post.data.tags?.includes(tag)
    );

    const pageSize = 4;
    const totalPages = Math.ceil(tagPosts.length / pageSize);

    // Generate paths for pages 2 and onwards
    return Array.from({ length: totalPages - 1 }, (_, i) => {
      const pageNum = i + 2; // Start from page 2
      const start = (pageNum - 1) * pageSize;
      const end = start + pageSize;

      return {
        params: { 
          tag: getTagSlug(tag),
          page: String(pageNum)
        },
        props: {
          tag,
          page: {
            data: tagPosts.slice(start, end),
            start,
            end,
            total: tagPosts.length,
            currentPage: pageNum,
            size: pageSize,
            lastPage: totalPages,
            url: {
              current: `/tags/${getTagSlug(tag)}/page/${pageNum}`,
              prev: pageNum === 2 ? `/tags/${getTagSlug(tag)}` : `/tags/${getTagSlug(tag)}/page/${pageNum - 1}`,
              next: pageNum < totalPages ? `/tags/${getTagSlug(tag)}/page/${pageNum + 1}` : undefined,
              first: `/tags/${getTagSlug(tag)}`,
              last: pageNum === totalPages ? undefined : `/tags/${getTagSlug(tag)}/page/${totalPages}`
            }
          }
        }
      };
    });
  });

  return paths;
}

const { page, tag } = Astro.props;
---

<Layout title={`Posts tagged with "${tag}" - Page ${page.currentPage}`}>
    <h1 class="text-2xl pl-4 pt-8 font-bold mb-8 flex items-center gap-2 text-gray-800 dark:text-gray-200">
      <Icon name="fa6-solid:tag" class="w-6 h-6" />
      Posts tagged with "{tag}"
      <span class="text-lg">- Page {page.currentPage}</span>
    </h1>

    {page.data.map((post: Post) => <BlogPostPreview post={post} />)}

    <Pagination 
      page={page}
      urlPattern={(pageNum) => pageNum === 1 ? `/tags/${getTagSlug(tag)}` : `/tags/${getTagSlug(tag)}/page/${pageNum}`}
    />
</Layout>