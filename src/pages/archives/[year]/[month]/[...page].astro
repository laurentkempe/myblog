---
import Layout from '../../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import BlogPostPreview from '../../../../components/BlogPostPreview.astro';
import Pagination from '../../../../components/Pagination.astro';
import type { Page } from 'astro';
import type { CollectionEntry } from 'astro:content';

type Post = CollectionEntry<'posts'>;

export async function getStaticPaths({ paginate }: { paginate: Function }) {
  const allPosts = await getCollection("posts");
  const sortedPosts = allPosts.sort((a, b) => 
    new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  );

  // Get unique year/month combinations from posts
  const yearMonths = [...new Set(sortedPosts.map(post => {
    const date = new Date(post.data.date);
    return {
      year: date.getFullYear(),
      month: String(date.getMonth() + 1).padStart(2, '0')
    };
  }).map(d => `${d.year}-${d.month}`))].map(ym => {
    const [year, month] = ym.split('-');
    return { year, month };
  });

  // For each year/month, create paginated routes
  return yearMonths.flatMap(({ year, month }) => {
    const monthPosts = sortedPosts.filter(post => {
      const date = new Date(post.data.date);
      return date.getFullYear() === parseInt(year) && 
             String(date.getMonth() + 1).padStart(2, '0') === month;
    });

    return paginate(monthPosts, {
      params: { year: String(year), month },
      pageSize: 4,
      props: { year, month }
    });
  });
}

const { page, year, month } = Astro.props;
const monthName = new Date(`${year}-${month}-01`).toLocaleString('en-US', { month: 'long' });
---

<Layout title={`Archives for ${monthName} ${year}`}>
    <h1 class="text-2xl pl-4 pt-8 font-bold mb-8 text-gray-800 dark:text-gray-200">
      Archives for {monthName} {year}
    </h1>

    {page.data.map((post: Post) => <BlogPostPreview post={post} />)}

    <Pagination 
      page={page} 
      urlPattern={(pageNum) => `/archives/${year}/${month}${pageNum === 1 ? '' : `/page/${pageNum}`}`} 
    />
</Layout>