---
import Layout from '../../../../layouts/Layout.astro';
import { getAllPosts } from '../../../../utils/collections';
import BlogPostPreview from '../../../../components/BlogPostPreview.astro';
import Pagination from '../../../../components/Pagination.astro';
import type { CollectionEntry } from 'astro:content';

type Post = CollectionEntry<'posts'>;

export async function getStaticPaths() {
  const sortedPosts = await getAllPosts();

  const years = [...new Set(sortedPosts.map(post => 
    new Date(post.data.date).getFullYear()
  ))];

  return years.flatMap(year => {
    const yearPosts = sortedPosts.filter(post => 
      new Date(post.data.date).getFullYear() === year
    );
    
    const pageSize = 4;
    const totalPages = Math.ceil(yearPosts.length / pageSize);
    
    // Skip page 1 as it's handled by index.astro
    return Array.from({ length: totalPages - 1 }, (_, i) => {
      const pageNum = i + 2; // Start from page 2
      const start = (pageNum - 1) * pageSize;
      const end = start + pageSize;
      
      return {
        params: { year: String(year), page: String(pageNum) },
        props: {
          year,
          page: {
            data: yearPosts.slice(start, end),
            start,
            end,
            total: yearPosts.length,
            currentPage: pageNum,
            size: pageSize,
            lastPage: totalPages,
            url: {
              current: `/archives/${year}/page/${pageNum}`,
              prev: pageNum === 2 ? `/archives/${year}` : `/archives/${year}/page/${pageNum - 1}`,
              next: pageNum < totalPages ? `/archives/${year}/page/${pageNum + 1}` : undefined,
              first: `/archives/${year}`,
              last: pageNum === totalPages ? undefined : `/archives/${year}/page/${totalPages}` // Remove last page link on last page
            }
          }
        }
      };
    });
  });
}

const { page, year } = Astro.props;
---

<Layout title={`Archives for ${year} - Page ${page.currentPage}`}>
    <h1 class="text-2xl pl-4 pt-8 font-bold mb-8 text-gray-800 dark:text-gray-200">
      Archives for {year}
    </h1>

    {page.data.map((post: Post) => <BlogPostPreview post={post} />)}

    <Pagination 
      page={page} 
      urlPattern={(pageNum) => `/archives/${year}${pageNum === 1 ? '' : `/page/${pageNum}`}`} 
    />
</Layout>