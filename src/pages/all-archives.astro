---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import PostListItem from '../components/PostListItem.astro';

const allPosts = await getCollection("posts");
const sortedPosts = allPosts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Group posts by year and month
const postsByYearAndMonth = sortedPosts.reduce((acc, post) => {
  const date = new Date(post.data.date);
  const year = date.getFullYear();
  const month = date.toLocaleString('en-US', { month: 'long' });
  
  if (!acc[year]) {
    acc[year] = {};
  }
  if (!acc[year][month]) {
    acc[year][month] = [];
  }
  
  acc[year][month].push(post);
  return acc;
}, {} as Record<number, Record<string, typeof sortedPosts>>);

// Sort years in descending order
const years = Object.keys(postsByYearAndMonth)
  .map(Number)
  .sort((a, b) => b - a);

// Month names in chronological order
const monthNames = [
  'January', 'February', 'March', 'April', 'May', 'June',
  'July', 'August', 'September', 'October', 'November', 'December'
];
---

<Layout title="Archives">
  <div class="max-w-4xl mx-auto px-4 pt-4">

    <div class="mb-8">
      <input
        type="text"
        id="dateSearch"
        placeholder="Search date (YYYY/MM/DD)"
        class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400"
      />
      <div id="searchCounter" class="mt-2 text-sm text-gray-600 dark:text-gray-400"></div>
    </div>

    <div id="archivesList">
      {years.map((year) => (
        <div class="mb-12 archive-year" data-year={year}>
          <h2 class="text-2xl font-semibold mb-6 text-gray-800 dark:text-gray-200">
            <a href={`/archives/${year}`} class="hover:underline">{year}</a>
          </h2>
          
          {monthNames
            .filter((month) => postsByYearAndMonth[year][month])
            .reverse()
            .map((month) => {
              const monthNumber = String(monthNames.indexOf(month) + 1).padStart(2, '0');
              return (
                <div class="mb-6 ml-4 archive-month" data-month={month}>
                  <h3 class="text-xl font-medium mb-3 text-gray-700 dark:text-gray-300">
                    <a href={`/archives/${year}/${monthNumber}`} class="hover:underline">{month}</a>
                  </h3>
                  <ul class="space-y-2 ml-4 list-disc list-outside">
                    {postsByYearAndMonth[year][month].map((post) => {
                      const date = new Date(post.data.date);
                      const formattedDate = `${date.getFullYear()}${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')}`;
                      
                      return (
                        <div class="archive-item" data-date={formattedDate}>
                          <PostListItem
                            title={post.data.title}
                            date={post.data.date}
                            href={post.data.permalink}
                            tags={post.data.tags}
                          />
                        </div>
                      );
                    })}
                  </ul>
                </div>
              );
            })}
        </div>
      ))}
    </div>
  </div>

  <script>
    function updateCounter(count: number, searchValue: string) {
      const counterElement = document.getElementById('searchCounter');
      if (counterElement) {
        if (!searchValue.trim()) {
          counterElement.textContent = ''; // Clear the counter text when search is empty
        } else if (count === 0) {
          counterElement.textContent = 'No posts found';
        } else {
          counterElement.textContent = `${count} ${count === 1 ? 'post' : 'posts'} found`;
        }
      }
    }

    function filterArchives(searchValue: string) {
      const archives = document.querySelectorAll<HTMLElement>('.archive-item');
      const years = document.querySelectorAll<HTMLElement>('.archive-year');
      const months = document.querySelectorAll<HTMLElement>('.archive-month');
      
      // Reset visibility
      archives.forEach(item => item.style.display = '');
      years.forEach(year => year.style.display = '');
      months.forEach(month => month.style.display = '');

      if (!searchValue.trim()) {
        updateCounter(archives.length, searchValue);
        return; // Show everything if search is empty
      }

      const parts = searchValue.split('/');
      const yearPattern = parts[0] || '';
      const monthPattern = parts[1] || '';
      const dayPattern = parts[2] || '';

      let visiblePostsCount = 0;

      years.forEach(yearDiv => {
        const yearValue = yearDiv.dataset.year;
        const yearMatch = yearValue?.startsWith(yearPattern) ?? false;
        
        if (!yearMatch) {
          yearDiv.style.display = 'none';
          return;
        }

        const monthDivs = yearDiv.querySelectorAll<HTMLElement>('.archive-month');
        let hasVisibleMonth = false;

        monthDivs.forEach(monthDiv => {
          const monthName = monthDiv.dataset.month;
          const monthNumber = monthName ? String(new Date(`${monthName} 1, 2000`).getMonth() + 1).padStart(2, '0') : '';
          const monthMatch = !monthPattern || monthNumber === monthPattern;
          
          if (!monthMatch) {
            monthDiv.style.display = 'none';
            return;
          }

          const items = monthDiv.querySelectorAll<HTMLElement>('.archive-item');
          let hasVisibleItem = false;

          items.forEach(item => {
            const date = item.dataset.date; // Format: YYYYMMDD
            const itemDay = date?.slice(6, 8);

            const dayMatch = !dayPattern || itemDay === dayPattern;

            if (dayMatch) {
              hasVisibleItem = true;
              item.style.display = ''; // Make sure to show matching items
              visiblePostsCount++;
            } else {
              item.style.display = 'none';
            }
          });

          if (!hasVisibleItem) {
            monthDiv.style.display = 'none';
          } else {
            hasVisibleMonth = true;
          }
        });

        if (!hasVisibleMonth) {
          yearDiv.style.display = 'none';
        }
      });

      updateCounter(visiblePostsCount, searchValue);
    }

    // Add event listener for the search input
    const searchInput = document.getElementById('dateSearch') as HTMLInputElement;
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        filterArchives((e.target as HTMLInputElement).value);
      });
      
      // Focus the search box when the page loads
      document.addEventListener('DOMContentLoaded', () => {
        searchInput.focus();
      });
    }
  </script>
</Layout>

